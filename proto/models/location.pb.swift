// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models/location.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Models_Location {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var tid: String = String()

  var lat: Int64 = 0

  var lon: Int64 = 0

  var alt: Int64 = 0

  var bear: Int64 = 0

  var ts: UInt64 = 0

  var batp: UInt64 = 0

  var bats: Bool = false

  var provider: String = String()

  var speed: UInt64 = 0

  var acc: Int64 = 0

  var sid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Models_Locations {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var items: [Models_Location] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Models_LocationsSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var set: Dictionary<String,Models_Locations> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "models"

extension Models_Location: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Location"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "tid"),
    3: .same(proto: "lat"),
    4: .same(proto: "lon"),
    5: .same(proto: "alt"),
    6: .same(proto: "bear"),
    7: .same(proto: "ts"),
    8: .same(proto: "batp"),
    9: .same(proto: "bats"),
    10: .same(proto: "provider"),
    11: .same(proto: "speed"),
    12: .same(proto: "acc"),
    13: .same(proto: "sid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.tid)
      case 3: try decoder.decodeSingularInt64Field(value: &self.lat)
      case 4: try decoder.decodeSingularInt64Field(value: &self.lon)
      case 5: try decoder.decodeSingularInt64Field(value: &self.alt)
      case 6: try decoder.decodeSingularInt64Field(value: &self.bear)
      case 7: try decoder.decodeSingularUInt64Field(value: &self.ts)
      case 8: try decoder.decodeSingularUInt64Field(value: &self.batp)
      case 9: try decoder.decodeSingularBoolField(value: &self.bats)
      case 10: try decoder.decodeSingularStringField(value: &self.provider)
      case 11: try decoder.decodeSingularUInt64Field(value: &self.speed)
      case 12: try decoder.decodeSingularInt64Field(value: &self.acc)
      case 13: try decoder.decodeSingularStringField(value: &self.sid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.tid.isEmpty {
      try visitor.visitSingularStringField(value: self.tid, fieldNumber: 2)
    }
    if self.lat != 0 {
      try visitor.visitSingularInt64Field(value: self.lat, fieldNumber: 3)
    }
    if self.lon != 0 {
      try visitor.visitSingularInt64Field(value: self.lon, fieldNumber: 4)
    }
    if self.alt != 0 {
      try visitor.visitSingularInt64Field(value: self.alt, fieldNumber: 5)
    }
    if self.bear != 0 {
      try visitor.visitSingularInt64Field(value: self.bear, fieldNumber: 6)
    }
    if self.ts != 0 {
      try visitor.visitSingularUInt64Field(value: self.ts, fieldNumber: 7)
    }
    if self.batp != 0 {
      try visitor.visitSingularUInt64Field(value: self.batp, fieldNumber: 8)
    }
    if self.bats != false {
      try visitor.visitSingularBoolField(value: self.bats, fieldNumber: 9)
    }
    if !self.provider.isEmpty {
      try visitor.visitSingularStringField(value: self.provider, fieldNumber: 10)
    }
    if self.speed != 0 {
      try visitor.visitSingularUInt64Field(value: self.speed, fieldNumber: 11)
    }
    if self.acc != 0 {
      try visitor.visitSingularInt64Field(value: self.acc, fieldNumber: 12)
    }
    if !self.sid.isEmpty {
      try visitor.visitSingularStringField(value: self.sid, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Models_Location, rhs: Models_Location) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.tid != rhs.tid {return false}
    if lhs.lat != rhs.lat {return false}
    if lhs.lon != rhs.lon {return false}
    if lhs.alt != rhs.alt {return false}
    if lhs.bear != rhs.bear {return false}
    if lhs.ts != rhs.ts {return false}
    if lhs.batp != rhs.batp {return false}
    if lhs.bats != rhs.bats {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.speed != rhs.speed {return false}
    if lhs.acc != rhs.acc {return false}
    if lhs.sid != rhs.sid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Models_Locations: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Locations"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Models_Locations, rhs: Models_Locations) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Models_LocationsSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LocationsSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Set"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Models_Locations>.self, value: &self.set)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.set.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Models_Locations>.self, value: self.set, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Models_LocationsSet, rhs: Models_LocationsSet) -> Bool {
    if lhs.set != rhs.set {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
